ext {
  componentName='Interlok/Apache jclouds blobstore'
}

dependencies {
  compile "org.apache.jclouds:jclouds-blobstore:$jcloudsVersion"
  compile "com.google.guava:guava:27.1-jre"
  testCompile "org.apache.jclouds.api:filesystem:$jcloudsVersion"
}


jar {
  manifest {
    attributes("Built-By": System.getProperty('user.name'),
              "Build-Jdk": System.getProperty('java.version'),
              "Implementation-Title": componentName,
              "Implementation-Version": project.version,
              "Implementation-Vendor-Id": project.group,
              "Implementation-Vendor": organizationName)
  }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

task examplesJar(type: Jar, dependsOn: test) {
    classifier = 'examples'
    from new File(buildDir, '/examples')
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
  archives javadocJar
  archives examplesJar
  archives sourcesJar
}


publishing {
  publications {
    mavenJava(MavenPublication) {
      from components.java
      artifact javadocJar { classifier "javadoc" }
      artifact examplesJar { classifier "examples" }
      artifact sourcesJar { classifier "sources" }
      pom.withXml {
        asNode().appendNode("description", "Use Apache jclouds to access your cloud storage")
        asNode().appendNode("name", componentName)
        def properties = asNode().appendNode("properties")
        properties.appendNode("target", "3.7.3+")
        properties.appendNode("tags", "s3,backblaze,azure blob,google cloud storage,rackspace")
        properties.appendNode("license", "false")
        properties.appendNode("externalUrl", "https://jclouds.apache.org/")
      }
    }
  }
  repositories {
    maven {
      credentials {
        username repoUsername
        password repoPassword
      }
      url mavenPublishUrl
    }
  }
}

javadoc.dependsOn offlinePackageList

